"use strict";
/**
 * SanityÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁµ±Âêà
 * Phase B: ÁîüÊàêÁîªÂÉè„ÅÆËá™ÂãïSanity„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÉªË®ò‰∫ãÊõ¥Êñ∞
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanityImageUploader = exports.SanityImageUploader = void 0;
const sanity_1 = require("./sanity");
const promises_1 = require("fs/promises");
const path_1 = require("path");
class SanityImageUploader {
    /**
     * ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇíSanity„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
     */
    async uploadImage(filePath, filename) {
        try {
            console.log(`üì§ Uploading image to Sanity: ${filename}`);
            // „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø
            const imageBuffer = await promises_1.default.readFile(filePath);
            // Sanity Asset API „Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            const asset = await sanity_1.client.assets.upload('image', imageBuffer, {
                filename: filename,
                title: filename.replace(/\.[^/.]+$/, ''), // Êã°ÂºµÂ≠ê„ÇíÈô§„ÅÑ„Åü„Éï„Ç°„Ç§„É´Âêç
            });
            console.log(`‚úÖ Image uploaded successfully: ${asset._id}`);
            return {
                _id: asset._id,
                url: asset.url,
                originalFilename: asset.originalFilename || filename,
                mimeType: asset.mimeType,
                size: asset.size
            };
        }
        catch (error) {
            console.error(`‚ùå Failed to upload image ${filename}:`, error);
            throw error;
        }
    }
    /**
     * ÁîüÊàêÁîªÂÉè„Éï„Ç©„É´„ÉÄÂÖ®‰Ωì„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
     */
    async uploadGeneratedImages(outputDir, jobId) {
        try {
            console.log(`üìÅ Processing images from: ${outputDir}`);
            const files = await promises_1.default.readdir(outputDir);
            const imageFiles = files.filter(file => file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg'));
            if (imageFiles.length === 0) {
                throw new Error(`No image files found in ${outputDir}`);
            }
            const uploadResults = [];
            for (const filename of imageFiles) {
                const filePath = path_1.default.join(outputDir, filename);
                // „Éï„Ç°„Ç§„É´Âêç„Åã„Çâ„Ç∑„Éº„É≥„ÇíÊé®ÂÆö
                const scene = this.extractSceneFromFilename(filename);
                try {
                    const asset = await this.uploadImage(filePath, filename);
                    uploadResults.push({
                        asset,
                        filename,
                        scene
                    });
                }
                catch (error) {
                    console.error(`‚ö†Ô∏è Failed to upload ${filename}, continuing with others...`);
                }
            }
            console.log(`‚úÖ Uploaded ${uploadResults.length}/${imageFiles.length} images`);
            return uploadResults;
        }
        catch (error) {
            console.error(`‚ùå Failed to upload images from ${outputDir}:`, error);
            throw error;
        }
    }
    /**
     * „Éï„Ç°„Ç§„É´Âêç„Åã„Çâ„Ç∑„Éº„É≥„Çø„Ç§„Éó„ÇíÊäΩÂá∫
     */
    extractSceneFromFilename(filename) {
        const lowerFilename = filename.toLowerCase();
        if (lowerFilename.includes('hero'))
            return 'hero';
        if (lowerFilename.includes('section1'))
            return 'section1';
        if (lowerFilename.includes('section2'))
            return 'section2';
        if (lowerFilename.includes('section3'))
            return 'section3';
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éï„Ç°„Ç§„É´Âêç„ÅÆÈ†ÜÂ∫è„ÅßÂà§ÂÆö
        if (lowerFilename.includes('-001-'))
            return 'hero';
        if (lowerFilename.includes('-002-'))
            return 'section1';
        if (lowerFilename.includes('-003-'))
            return 'section2';
        if (lowerFilename.includes('-004-'))
            return 'section3';
        return 'unknown';
    }
    /**
     * SanityË®ò‰∫ã„ÅÆÁîªÂÉè„Éï„Ç£„Éº„É´„ÉâÊõ¥Êñ∞
     */
    async updateArticleImages(articleId, uploadResults) {
        try {
            console.log(`üìù Updating article images: ${articleId}`);
            // ÁîªÂÉè„Çí„Ç∑„Éº„É≥Âà•„Å´ÂàÜÈ°û
            const heroImage = uploadResults.find(result => result.scene === 'hero')?.asset;
            const sectionImages = uploadResults
                .filter(result => result.scene.startsWith('section'))
                .sort((a, b) => a.scene.localeCompare(b.scene))
                .map(result => result.asset);
            // SanityË®ò‰∫ãÊõ¥Êñ∞„Éë„ÉÉ„ÉÅ
            const updatePatch = {};
            if (heroImage) {
                updatePatch.heroImage = {
                    _type: 'image',
                    asset: {
                        _type: 'reference',
                        _ref: heroImage._id
                    },
                    alt: `Hero image for article`
                };
            }
            if (sectionImages.length > 0) {
                updatePatch.sectionImages = sectionImages.map((asset, index) => ({
                    _type: 'image',
                    _key: `section-${index + 1}`,
                    asset: {
                        _type: 'reference',
                        _ref: asset._id
                    },
                    alt: `Section ${index + 1} image`
                }));
            }
            // Ë®ò‰∫ãÊõ¥Êñ∞ÂÆüË°å
            if (Object.keys(updatePatch).length > 0) {
                await sanity_1.client
                    .patch(articleId)
                    .set(updatePatch)
                    .commit();
                console.log(`‚úÖ Article images updated successfully: ${articleId}`);
            }
            else {
                console.log(`‚ö†Ô∏è No valid images to update for article: ${articleId}`);
            }
            return {
                articleId,
                heroImage,
                sectionImages,
                uploadResults
            };
        }
        catch (error) {
            console.error(`‚ùå Failed to update article images:`, error);
            throw error;
        }
    }
    /**
     * ÂÆåÂÖ®„Å™ÁîªÂÉèÁµ±ÂêàÂá¶ÁêÜ („Ç¢„ÉÉ„Éó„É≠„Éº„Éâ + Ë®ò‰∫ãÊõ¥Êñ∞)
     */
    async processImageIntegration(outputDir, articleId, jobId) {
        try {
            console.log(`üîÑ Starting complete image integration for article: ${articleId}`);
            // 1. ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            const uploadResults = await this.uploadGeneratedImages(outputDir, jobId);
            if (uploadResults.length === 0) {
                throw new Error('No images were successfully uploaded');
            }
            // 2. Ë®ò‰∫ãÊõ¥Êñ∞
            const updateResult = await this.updateArticleImages(articleId, uploadResults);
            console.log(`üéâ Image integration completed successfully for article: ${articleId}`);
            return updateResult;
        }
        catch (error) {
            console.error(`‚ùå Image integration failed for article ${articleId}:`, error);
            throw error;
        }
    }
    /**
     * Ë®ò‰∫ã„ÅÆÁèæÂú®„ÅÆÁîªÂÉèÊÉÖÂ†±„ÇíÂèñÂæó
     */
    async getArticleImageInfo(articleId) {
        try {
            const article = await sanity_1.client.fetch(`*[_type == "post" && _id == $articleId][0]{
          heroImage,
          sectionImages
        }`, { articleId });
            if (!article) {
                throw new Error(`Article not found: ${articleId}`);
            }
            return {
                hasHeroImage: !!article.heroImage,
                sectionImageCount: article.sectionImages?.length || 0,
                currentHeroImage: article.heroImage?.asset ? {
                    _id: article.heroImage.asset._ref,
                    url: '', // URL„ÅØÂà•ÈÄîËß£Ê±∫„ÅåÂøÖË¶Å
                    originalFilename: '',
                    mimeType: '',
                    size: 0
                } : undefined,
                currentSectionImages: article.sectionImages?.map((img) => ({
                    _id: img.asset._ref,
                    url: '',
                    originalFilename: '',
                    mimeType: '',
                    size: 0
                })) || []
            };
        }
        catch (error) {
            console.error(`‚ùå Failed to get article image info:`, error);
            throw error;
        }
    }
}
exports.SanityImageUploader = SanityImageUploader;
// „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
exports.sanityImageUploader = new SanityImageUploader();
